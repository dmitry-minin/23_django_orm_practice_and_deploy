name: Django CI

on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry --version

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry

      - name: Create .env for CI
        run: |
          cat > .env << 'EOF'
          # Django
          SECRET_KEY=test
          DEBUG=0
          # DB (provide both common naming schemes to match project settings)
          POSTGRES_DB=test_db
          POSTGRES_USER=test_user
          POSTGRES_PASSWORD=test_password
          POSTGRES_HOST=127.0.0.1
          POSTGRES_PORT=5432
          DB_NAME=test_db
          DB_USER=test_user
          DB_PASSWORD=test_password
          DB_HOST=127.0.0.1
          DB_PORT=5432
          EOF

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Run migrations
        env:
          SECRET_KEY: test
        run: poetry run python manage.py migrate --noinput

      - name: Run tests
        env:
          SECRET_KEY: test
        run: poetry run python manage.py test -v 2

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            cd ${{ secrets.DEPLOY_DIR }}
            # Ensure pip and Poetry
            python3 -m pip install -U pip
            pip3 install "poetry>=1.8.0"
            # Install only production dependencies
            poetry install --only main --no-interaction --no-ansi
          EOF

      - name: Apply migrations on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            cd ${{ secrets.DEPLOY_DIR }}
            poetry run python manage.py migrate --noinput
          EOF

      - name: Collect static files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -e
            cd ${{ secrets.DEPLOY_DIR }}
            poetry run python manage.py collectstatic --noinput || true
          EOF

      - name: Restart application
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo systemctl restart ${{ secrets.SERVICE_NAME }}
          EOF
