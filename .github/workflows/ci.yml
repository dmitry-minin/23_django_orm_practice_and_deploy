name: Django CI

on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry --version

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry

      - name: Create .env for CI
        run: |
          cat > .env << 'EOF'
          # Django
          SECRET_KEY=test
          DEBUG=0
          # DB (provide both common naming schemes to match project settings)
          POSTGRES_DB=test_db
          POSTGRES_USER=test_user
          POSTGRES_PASSWORD=test_password
          POSTGRES_HOST=127.0.0.1
          POSTGRES_PORT=5432
          DB_NAME=test_db
          DB_USER=test_user
          DB_PASSWORD=test_password
          DB_HOST=127.0.0.1
          DB_PORT=5432
          EOF

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --no-root

      - name: Run migrations
        env:
          SECRET_KEY: test
        run: poetry run python manage.py migrate --noinput

      - name: Run tests
        env:
          SECRET_KEY: test
        run: poetry run python manage.py test -v 2

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF
